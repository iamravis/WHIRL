"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2. (Adjust version as needed)

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# Import python-dotenv if you plan to use .env file later
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from the backend directory (BASE_DIR)
dotenv_path = BASE_DIR / '.env'
load_dotenv(dotenv_path=dotenv_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# We'll load this from .env later
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-placeholder-replace-me-later')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = [] # Configure later for production


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'corsheaders',  # Add corsheaders
    'rest_framework_simplejwt', # Add Simple JWT
    # Local apps
    'api', # Our core API app
    # Add the new rag app if it exists (from previous step, otherwise ignore)
    'rag', # Register the RAG application
    # Add the new rag app if it exists (from previous step, otherwise ignore)
    # 'rag', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Add CORS middleware (must be before CommonMiddleware)
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls' # Points to backend/core/urls.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application' # Points to backend/core/wsgi.py


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'), # Default to localhost if not set
        'PORT': os.getenv('DB_PORT', '5432'),     # Default PG port if not set
    }
}
# We will configure PostgreSQL using environment variables later.


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC' # Or your preferred time zone

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only, set to False in production
# Alternative for production (specify allowed origins):
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Next.js dev server
#     "http://127.0.0.1:3000",
# ] 

# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Use JWT authentication as the default
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Keep session auth for Django admin and potentially other parts
        # 'rest_framework.authentication.SessionAuthentication',
        # Keep basic auth if needed for simple API clients/testing
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # Default to requiring authentication
        'rest_framework.permissions.IsAuthenticated',
    )
}

# --- Simple JWT Settings ---
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # e.g., 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # e.g., 1 day
    'ROTATE_REFRESH_TOKENS': False, # Set to True if you want refresh tokens to rotate
    'BLACKLIST_AFTER_ROTATION': False, # Requires adding 'rest_framework_simplejwt.token_blacklist' to INSTALLED_APPS
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Expect "Bearer <token>"
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
} 

# --- Authentication Backends ---
AUTHENTICATION_BACKENDS = (
    # Custom backend for email authentication first
    'api.backends.EmailBackend',
    # Default backend for username authentication (e.g., for Django admin)
    'django.contrib.auth.backends.ModelBackend', 
) 

# --------------------------------------------------------------------------
# RAG System Settings
# --------------------------------------------------------------------------
# Load settings from environment variables with defaults from rag/config.py

# --- Model Paths/Names ---
RAG_LLM_MODEL_PATH = os.getenv("RAG_LLM_MODEL_PATH", "meta-llama/Llama-3.2-3B-Instruct")
RAG_LLM_LOCAL_PATH = os.getenv("RAG_LLM_LOCAL_PATH", str(BASE_DIR / "models")) # Relative to backend/
RAG_RERANKER_MODEL = os.getenv("RAG_RERANKER_MODEL", "cross-encoder/ms-marco-MiniLM-L-6-v2")
RAG_QUERY_TRANSFORMATION_MODEL = os.getenv("RAG_QUERY_TRANSFORMATION_MODEL", "google/flan-t5-large")
RAG_EMBEDDING_MODEL = os.getenv("RAG_EMBEDDING_MODEL", "BAAI/bge-large-en-v1.5")
# PRM Models (If used)
RAG_PRM_BASE_MODEL = os.getenv("RAG_PRM_BASE_MODEL", "meta-llama/Llama-3.2-3B-Instruct")
RAG_PRM_PEFT_PATH = os.getenv("RAG_PRM_PEFT_PATH", "pixas/MedSSS_PRM")

# --- Device and Precision ---
# RAG_DEVICE_MAP = os.getenv("RAG_DEVICE_MAP", "auto") # Removed - Device detection should happen dynamically in code
# Store dtype as string, convert where needed. Using 'float16' as default.
# Note: float16 may not be supported on all hardware (e.g., older CPUs/GPUs). Adjust if needed.
RAG_TORCH_DTYPE_STR = os.getenv("RAG_TORCH_DTYPE_STR", "float16")

# --- Paths ---
# Define the data directory relative to the backend base directory
# RAG_DATA_DIR = os.getenv("RAG_DATA_DIR", str(BASE_DIR / "data")) # Old default
# Point RAG_DATA_DIR to the 'rag' app directory where creation scripts save files
RAG_DATA_DIR = os.getenv("RAG_DATA_DIR", str(BASE_DIR / "rag")) 
# Note: Directory creation logic should be handled by the component needing the directory.

# --- Document Processing ---
RAG_CHUNK_SIZE = int(os.getenv("RAG_CHUNK_SIZE", 200))
RAG_CHUNK_OVERLAP = int(os.getenv("RAG_CHUNK_OVERLAP", 10))

# --- Vector Store ---
RAG_COLLECTION_NAME = os.getenv("RAG_COLLECTION_NAME", "rag-chroma")
# Path to ChromaDB inside the 'rag' app directory (Matches RAG_DATA_DIR change)
RAG_VECTORSTORE_PATH = os.getenv("RAG_VECTORSTORE_PATH", str(BASE_DIR / "rag" / "chroma_db"))

# --- Conversation Settings ---
RAG_MAX_HISTORY_LENGTH = int(os.getenv("RAG_MAX_HISTORY_LENGTH", 10))
RAG_TEMPERATURE = float(os.getenv("RAG_TEMPERATURE", 0.7))

# --- Service URLs (If using separate services like rag_server.py) ---
LLM_SERVICE_URL = os.getenv("LLM_SERVICE_URL", "http://localhost:8001") # Used by rag_server.py
RAG_SERVICE_URL = os.getenv("RAG_SERVICE_URL", "http://localhost:8002") # URL for Django to call rag_server.py 

# --- RAG Configuration ---
# (Existing RAG settings like EMBEDDING_MODEL, VECTOR_STORE_PATH, etc.)
# ...

# --- Large Language Model (LLM) Configuration (for RAGBot internal generation) ---
# Model identifier from Hugging Face Hub or local path
LLM_MODEL_NAME_OR_PATH = "meta-llama/Llama-3.2-3B-Instruct"
# Usually the same as the model, but can be different
LLM_TOKENIZER_NAME_OR_PATH = "meta-llama/Llama-3.2-3B-Instruct"
# LLM device placement ('auto', 'cuda', 'mps', 'cpu') - 'auto' requires accelerate
LLM_DEVICE_MAP = "auto"
# Data type ('bfloat16', 'float16', 'float32') - use 'bfloat16' or 'float16' for efficiency if supported
LLM_TORCH_DTYPE = "bfloat16"
# Quantization ('4bit', '8bit', 'none') - '4bit'/'8bit' require bitsandbytes
LLM_QUANTIZATION = "none" # Change to '4bit' or '8bit' if needed and bitsandbytes is installed/working
# Generation parameters
LLM_MAX_NEW_TOKENS = 512
LLM_TEMPERATURE = 0.6 # Example, adjust as needed
LLM_TOP_P = 0.9       # Example, adjust as needed
# Whether to apply the chat template (recommended for instruct models)
LLM_APPLY_CHAT_TEMPLATE = True

# --- Other settings like DATABASES, STATIC_URL etc. ---
# ... existing code ... 

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers active
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '[%(asctime)s] %(levelname)s: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO', # Show DEBUG logs if DEBUG=True
            'class': 'logging.StreamHandler',
            'formatter': 'simple' # Use the simple format for console
        },
        # Add other handlers like file handlers if needed
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'logs/django.log',
        #     'formatter': 'verbose'
        # },
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Send Django's logs to console
            'level': 'INFO', # Default level for Django logs
            'propagate': True,
        },
        'api': { # Configure our app's logger
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO', # Show DEBUG from our app if DEBUG=True
            'propagate': False, # Don't send api logs to the root logger too
        },
        'rag': { # Configure RAG app's logger if needed
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        # Root logger (catches logs from other apps unless propagate=False)
        # '': {
        #     'handlers': ['console'],
        #     'level': 'INFO', # Base level for other apps
        # },
    },
} 